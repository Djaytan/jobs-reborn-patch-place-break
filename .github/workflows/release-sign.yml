name: Release - Sign

on:
  workflow_dispatch:
    inputs:
      tag-name:
        required: true
        description: The tag name associated to a release containing assets to be signed
  workflow_run:
    workflows: [Release - Perform]
    types: [completed]

permissions: {}

jobs:
  sign:
    name: Sign
    runs-on: ubuntu-latest
    timeout-minutes: 120

    permissions:
      contents: write
      id-token: write

    env:
      ASSETS_DIR: ${{ github.workspace }}/assets
      SIGNATURES_DIR: ${{ github.workspace }}/signatures

    steps:
      - name: Harden runner
        uses: step-security/harden-runner@eb238b55efaa70779f274895e782ed17c84f2895 # v2.6.1
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            github.com:443
            api.github.com:443
            uploads.github.com:443
            objects.githubusercontent.com:443
            fulcio.sigstore.dev:443
            rekor.sigstore.dev:443
            tuf-repo-cdn.sigstore.dev:443

      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          persist-credentials: false

      - name: Retrieve tag name
        id: tag
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == 'workflow_dispatch' ]]; then
            TAG_NAME=${{ inputs.tag-name }}
          else
            TAG_NAME=${{ github.event.release.tag_name }}
          fi

          echo "The retrieved tag name is '${TAG_NAME}'"

          echo "name=${TAG_NAME}" >> "${GITHUB_OUTPUT}"

      - name: Input validation
        run: |
          if [[ ! '${{ steps.tag.outputs.name }}' =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo 'Invalid tag name'
            echo 'Aborting...'
            exit 1
          fi

          echo 'The provided tag name is valid'

      - name: Download release assets
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release download ${{ steps.tag.outputs.name }} --dir "${ASSETS_DIR}"

      - name: Install Cosign
        uses: sigstore/cosign-installer@9614fae9e5c5eddabb09f90a270fcb487c9f7149 # v3.3.0

      - name: Sign blob files
        run: |
          mkdir --parents "${SIGNATURES_DIR}"

          for ASSET_FILE in "${ASSETS_DIR}"/*; do
            ASSET_NAME="$(basename "${ASSET_FILE}")"
            ASSET_FILE_NAME="${ASSETS_DIR}/${ASSET_NAME}"
            CERT_FILE_NAME="${ASSET_NAME}-keyless.pem"
            SIG_FILE_NAME="${ASSET_NAME}-keyless.sig"

            if [[ "${ASSET_FILE_NAME}" =~ keyless\.(pem|sig)$ ]]; then
              echo "Signature file '${ASSET_FILE_NAME}' found among assets"
              echo 'Skipping asset...'
              continue
            fi

            if [[ -f "${ASSETS_DIR}/${CERT_FILE_NAME}" && -f "${ASSETS_DIR}/${SIG_FILE_NAME}" ]]; then
              echo "Signature files already exist for asset '${ASSET_FILE_NAME}'"
              echo 'Skipping asset...'
              continue
            fi

            if [[ -f "${ASSETS_DIR}/${CERT_FILE_NAME}" || -f "${ASSETS_DIR}/${SIG_FILE_NAME}" ]]; then
              echo 'Error: only one signing file found over the two expected ones'
              echo 'Manual investigation required, please check!'
              echo 'Aborting...'
              exit 1
            fi

            echo "The asset '${ASSET_FILE_NAME}' is going to be signed..."

            cosign sign-blob "${ASSET_FILE}" --yes \
              --output-certificate="${SIGNATURES_DIR}/${CERT_FILE_NAME}" \
              --output-signature="${SIGNATURES_DIR}/${SIG_FILE_NAME}"
          done

      - name: Verify signatures
        env:
          CERTIFICATE_IDENTITY: ${{ github.server_url }}/${{ github.workflow_ref }}
          CERTIFICATE_OIDC_ISSUER: https://token.actions.githubusercontent.com
        run: |
          echo "GITHUB_WORKFLOW=${GITHUB_WORKFLOW}"
          echo "GITHUB_REF=${GITHUB_REF}"
          echo "GITHUB_REPOSITORY=${GITHUB_REPOSITORY}"
          echo "GITHUB_SHA=${GITHUB_SHA}"
          echo "GITHUB_EVENT_NAME=${GITHUB_EVENT_NAME}"

          for ASSET_FILE in "${ASSETS_DIR}"/*; do
            ASSET_NAME="$(basename "${ASSET_FILE}")"
            ASSET_FILE_NAME="${ASSETS_DIR}/${ASSET_NAME}"
            CERT_FILE_NAME="${ASSET_NAME}-keyless.pem"
            SIG_FILE_NAME="${ASSET_NAME}-keyless.sig"

            if [[ "${ASSET_FILE_NAME}" =~ keyless\.(pem|sig)$ ]]; then
              echo "Signature file '${ASSET_FILE_NAME}' found among assets"
              echo 'Skipping asset...'
              continue
            fi

            if [[ -f "${ASSETS_DIR}/${CERT_FILE_NAME}" && -f "${ASSETS_DIR}/${SIG_FILE_NAME}" ]]; then
              echo "Signature files already exist for asset '${ASSET_FILE_NAME}'"
              echo 'Skipping asset...'
              continue
            fi

            cosign verify-blob "${ASSET_FILE}" \
              --signature="${SIGNATURES_DIR}/${SIG_FILE_NAME}" \
              --certificate="${SIGNATURES_DIR}/${CERT_FILE_NAME}" \
              --certificate-identity="${CERTIFICATE_IDENTITY}" \
              --certificate-oidc-issuer="${CERTIFICATE_OIDC_ISSUER}" \
              --certificate-github-workflow-name="${GITHUB_WORKFLOW}" \
              --certificate-github-workflow-ref="${GITHUB_REF}" \
              --certificate-github-workflow-repository="${GITHUB_REPOSITORY}" \
              --certificate-github-workflow-sha="${GITHUB_SHA}" \
              --certificate-github-workflow-trigger="${GITHUB_EVENT_NAME}"
          done

      - name: Upload signature assets in release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [[ -z "$(ls --almost-all "${SIGNATURES_DIR}" 2>/dev/null)" ]]; then
            echo 'No asset to be uploaded in the GitHub release'
            echo 'Aborting...'
            exit 1
          fi

          echo "Uploading the following files in the GitHub release '${{ steps.tag.outputs.name }}'"
          ls --almost-all "${SIGNATURES_DIR}"
          gh release upload ${{ steps.tag.outputs.name }} "${SIGNATURES_DIR}"/*
          echo 'Files uploaded successfully'
